_config:
  _metadata:
    description: cyclone-server
    name: cyclone-server
    namespace: default
    template:
      type: template.caicloud.io/application
      version: 1.0.0
    version: '[[ imageTagFromGitTag ]]'
  controllers:
  - containers:
    - command:
      - /cyclone-server
      env:
      - name: MONGODB_HOST
        value: '[[ platform_mongo_host ]]'
      - name: REGISTRY_LOCATION
        value: '[[ cargo_registry ]]'
      - name: REGISTRY_USERNAME
        value: admin
      - name: REGISTRY_PASSWORD
        value: Pwd123456
      - name: CLIENTID
        value: clientid
      - name: CLIENTIDSECRET
        value: clientidsecret
      - name: CONSOLE_WEB_ENDPOINT
        value: '[[ compassWebEndpoint ]]'
      - name: CLIENTID_GITLAB
        value: clientid_gitlab
      - name: CLIENTIDSECRET_GITLAB
        value: clientidsecret_gitlab
      - name: SERVER_GITLAB
        value: https://gitlab.com
      - name: CYCLONE_SERVER
        value: 'http://[[ kube_apiserver_endpoint_ip ]]:6008'
      - name: WORKER_IMAGE
        value: '[[ registry_release ]]/cyclone-worker:[[ imageTagFromGitTag ]]'
      - name: CLOUD_AUTO_DISCOVERY
        value: 'true'
      - name: LIMIT_MEMORY
        value: 4Gi
      - name: LIMIT_CPU
        value: '2'
      - name: REQUEST_MEMORY
        value: 1Gi
      - name: REQUEST_CPU
        value: '0.5'
      - name: SMTP_PASSWORD
        value: smtp_password
      - name: SMTP_PORT
        value: smtp_port
      - name: SMTP_SERVER
        value: smtp_server
      - name: SMTP_USERNAME
        value: smtp_username
      - name: RECORD_ROTATION_THRESHOLD
        value: '50'
      - name: NOTIFICATION_URL
        value: http://devops-admin:7088/api/v1/notification
      - name: RECORD_WEB_URL_TEMPLATE
        value: '[[ compassWebEndpoint ]]/devops/pipeline/{{.Pipeline.Name}}/record/{{.PipelineRecord.ID}}?workspace={{.Project.Name}}&tenant={{index .Pipeline.Annotations "tenant"}}'
      - name: CALLBACK_URL
        from:
          type: Config
          name: platform-config
          key: "devopsWebhookURL"
      image: '[[ registry_release ]]/cyclone-server:[[ imageTagFromGitTag ]]'
      imagePullPolicy: IfNotPresent
      mounts:
      - name: cyclone-data
        path: /var/lib/cyclone
      - name: registry-cert
        path: /tmp/certs
      - name: templates
        path: /config/templates
      ports:
      - port: 7099
        protocol: TCP
    controller:
      replica: 1
    pod:
      serviceAccountName: admin
    services:
    - name: cyclone-server
      ports:
      - port: 7099
        protocol: TCP
        targetPort: 7099
      type: ClusterIP
    type: Deployment
    volumes:
    - name: cyclone-data
      type: Dynamic
      source:
        class: heketi-storageclass
        modes:
        - ReadWriteMany
      storage:
        request: 500Gi
        limit: 500Gi
    - name: registry-cert
      type: Config
      source:
        items:
        - key: cargo_ca
          path: registry.crt
        target: platform-info
    - name: templates
      source:
        items:
        - key: cyclone-templates.yaml
          path: templates.yaml
        target: cyclone-config
      type: Config
    configs:
    - name: cyclone-config
      data:
      - key: cyclone-templates.yaml
        value: |
          - name: Maven
            type: Maven
            builderImage: maven:3.5.3-jdk-8-alpine
            testCommands: |
              mvn test
            packageCommands: |
              mvn clean package -Dmaven.test.skip
            customizedDockerfiles:
              Maven: |
                FROM jboss/base-jdk:8

                # Copy your file from source to destination.
                COPY target/<app>.jar  /test-app.jar

                # Expose ports.
                EXPOSE 8081

                # Run your app or exec your start scripts.
                CMD ["java", "-jar", "/test-app.jar"]

          - name: Gradle
            type: Gradle
            builderImage: gradle:3.4.1
            testCommands: |
              gradle clean test
            packageCommands: |
              gradle build -x test
            customizedDockerfiles:
              Gradle: |
                FROM jboss/base-jdk:8

                # Copy your file from source to destination.
                COPY build/<app>.jar  /test-app.jar

                # Expose ports.
                EXPOSE 8081

                # Run your app or exec your start scripts.
                CMD ["java", "-jar", "/test-app.jar"]

          - name: Go
            type: Go
            builderImage: golang:1.9.5-alpine3.7
            testCommands: |
              echo $GOPATH
              # Replace the {repo-path} with your own repository path, e.g. "github.com/caicloud/cyclone".
              REPO_PATH={repo-path}
              WORKDIR=$GOPATH/src/$REPO_PATH
              PARENT_PATH="$(dirname "$WORKDIR")"
              mkdir -p $PARENT_PATH
              ln -s `pwd` $WORKDIR
              cd $WORKDIR
              ls -la
              # Thert are 2 ways to run your tests, please choose one of them:
              # 1. Run your tests without JUnit test reports:
              go test -v -cover $(go list ./...)
              # 2. Run your tests with JUnit test reports:
              # apk add --no-cache git
              # go get -u github.com/jstemmer/go-junit-report
              # go test -v -cover $(go list ./...) 2>&1 | tee output.tmp
              # cat output.tmp| go-junit-report > report.xml
            packageCommands: |
              # Replace the {main-method-path} with the path of directory which contains a main() function.
              cd $WORKDIR/{main-method-path}
              go build -i -v
            packageOutputs: |
            customizedDockerfiles:
              Go: |
                FROM alpine:3.6

                # Change path to your work dir.
                WORKDIR /root

                # Copy your file from source to destination.
                COPY <app> /test-app

                # Expose ports.
                EXPOSE 7099

                # Run your app or exec your start scripts.
                ENTRYPOINT ["/test-app"]

          - name: Python
            type: Python
            builderImage: python:3.6.5-alpine3.6
            testCommands: |
              # Run all the test*.py modules inside the test package.
              python -m unittest discover -s test -p 'test*.py'
            packageCommands: |
            customizedDockerfiles:
              Python: |
                FROM python:3.6.5-alpine3.6

                # Create working directory
                RUN mkdir -p /usr/src/app
                WORKDIR /usr/src/app

                # Add your uploaded file to workplace, if it's an archive file (zip, tar, tar.gz),
                # it will be unpacked and added to worksapce.
                ADD <uploaded-file> .

                # Make sure the requirements.txt file exists and then install dependencies using it.
                RUN touch requirements.txt
                RUN pip install --no-cache-dir -r requirements.txt

                CMD [ "python", "./<entrypoint>.py" ]

          - name: NodeJS
            type: NodeJS
            builderImage: node:9-alpine
            testCommands: |
            packageCommands: |
              npm run build
            customizedDockerfiles:
              NodeJS: |
                FROM node:9-alpine

                # Create working directory
                WORKDIR /usr/src/app

                # Add your uploaded file to workplace, if it's an archive file (zip, tar, tar.gz),
                # it will be unpacked and added to worksapce.
                ADD <uploaded-file> .

                # Install app dependencies, if you are building your code for production
                # RUN npm install --only=production
                RUN npm install

                EXPOSE 8080
                CMD [ "npm", "start" ]

          - name: PHP
            type: PHP
            builderImage: php:7.1-apache
            testCommands: |
            packageCommands: |
            customizedDockerfiles:
              PHP: |
                FROM php:7.1-apache

                # Add your uploaded file to workplace, if it's an archive file (zip, tar, tar.gz),
                # it will be unpacked and added to worksapce.
                ADD <uploaded-file> /var/www/html/

                EXPOSE 80
