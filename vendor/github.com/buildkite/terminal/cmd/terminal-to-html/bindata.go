package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"reflect"
	"strings"
	"time"
	"unsafe"
)

func bindata_read(data, name string) ([]byte, error) {
	var empty [0]byte
	sx := (*reflect.StringHeader)(unsafe.Pointer(&data))
	b := empty[:]
	bx := (*reflect.SliceHeader)(unsafe.Pointer(&b))
	bx.Data = sx.Data
	bx.Len = len(data)
	bx.Cap = bx.Len

	gz, err := gzip.NewReader(bytes.NewBuffer(b))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _assets_terminal_css = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x99\xcd\x72\xe3\xb8\x15\x85\xf7\x7e\x0a\x56\xcd\x22\xc9\xd4\x28\x4d\x00\x04\x01\xb8\x57\xd9\xf4\x2e\x0f\x01\xf1\xc7\x66\xb5\x2c\xba\x28\x39\xb6\xd3\xd5\xef\x3e\x84\xe4\x1f\xde\xef\xda\x58\xcc\x58\xe7\x23\x79\xce\x91\x8c\xc6\xb5\xff\x7d\x1e\x96\x87\x5d\x37\x1f\xcf\x79\x3a\x0e\x4b\xf5\xeb\xa6\xaa\xf6\xb9\xfb\x79\xb7\xcc\x4f\xc7\xfe\xb6\xfa\xc3\x84\xb2\xbe\x97\x97\xe7\xa5\x1f\x96\xdd\x92\xfb\xe9\xe9\x74\x5b\xf9\xc7\x97\xf2\x6a\x37\x1f\xe6\xe5\xb6\x7a\xbe\x9f\xce\x43\xf9\xfe\x79\xa5\x76\xfb\x65\xc8\x3f\x6f\xab\xcb\x7f\x76\xe5\x95\xa2\xcc\xff\x1b\x96\xf1\x30\x3f\xef\x9e\x97\xfc\x48\x71\x5c\x1d\xec\xc6\xfc\x30\x1d\x5e\x6f\xab\xff\xce\xc7\xdc\xcd\x7f\xad\xf7\x7e\x5a\xa6\x61\xf9\xd0\x4f\xd3\xff\x87\xdb\xca\xd8\xeb\x93\x0f\xab\xe1\xdd\xfd\x30\xdd\xdd\x9f\x6f\x2b\x5b\x5f\x5f\x7c\xcc\x7d\x3f\x1d\xef\x56\xaa\x79\x7c\xa9\x4c\xbc\xbe\x7a\x71\xb7\x3b\x3d\xe6\x6e\xbd\xfe\x71\x19\x2e\x16\xbe\xdf\xfc\xbe\xb9\xb9\xe6\x1f\xef\x4c\xf5\xab\xfa\x5d\x7d\xfb\xb3\xea\xe7\xe3\x3f\xce\x6b\xd6\x43\x5f\xed\x87\xae\xcb\x4f\xa7\xa1\x9a\xce\xd5\x61\x9e\x7f\x9e\xaa\xe7\x61\x5a\xfa\xea\xcf\x6f\x1f\x97\xb9\xf5\xb2\xab\xb5\xf3\xeb\x61\xbd\xf7\x74\xce\x87\xa9\xfb\x7e\xbd\xd5\xf5\x9b\x2d\xde\xac\xf8\x79\x78\x39\xef\xfa\xa1\x9b\x97\x7c\x9e\xe6\xe3\x6d\xb5\xf6\x3c\x2c\x25\xcc\xdb\x65\x1f\xdf\x6f\xaf\x4c\x5f\x5d\x79\x69\xe0\x7c\xbf\xbe\x55\x77\xf7\x6f\x17\x77\xcb\x7c\x3a\x0d\xfd\x6e\x7e\x3a\x97\xcb\x3f\x8d\xd6\xeb\x0d\xde\xde\xab\x3f\xda\xb6\x7d\xc3\xf7\x87\xf5\xbd\xae\xfe\xb9\x5f\xe9\xe7\xa1\xea\x72\xc9\x5e\x12\x5f\x5e\xff\xab\x3a\xcd\x55\xae\xfa\x69\x1c\xaf\x97\xfe\x4b\x44\x37\x9b\x3b\x0e\xa6\xee\x6a\xfb\x76\xd3\x65\x90\x1d\xd9\x0d\x98\xd2\x38\xfa\xf7\xa4\x77\xcb\x30\x1c\x05\xea\x36\x68\xd7\x76\xfe\xe3\x9e\xaf\xc3\x61\xfd\xe8\x08\xb6\xd9\xb0\xb1\xdf\x87\xa1\xfe\x08\xf5\x24\xba\x73\x7e\x43\x8e\x36\x98\x71\xff\x46\x3e\xe4\xbb\x61\xfd\xe4\x0b\xb8\xdd\xc0\x75\xdd\xf5\x7d\x7a\xaf\xf6\x35\x5f\xcc\xde\xac\xff\x7f\xbf\x7e\xea\xaa\xe9\x78\x1e\x8e\x6b\x59\x17\xfa\xb4\xbd\xc9\xb4\xed\xc6\x0f\x63\x68\xfd\x7a\x93\x4f\x39\x6d\xdf\x8d\xe8\x62\x8c\xe1\xb3\x92\xd7\xf7\x87\x7c\xfe\x1c\xaa\x47\xec\xef\x9a\xd2\xaa\xf8\x49\xbd\x54\x3b\x7e\x3e\x67\x65\x6a\x32\x6d\x28\xab\x30\xe5\x01\xdd\xd3\xe9\x3c\x3f\xac\x1f\xe0\x65\xb8\x12\xdf\xc4\x23\x1f\xf6\xf3\xa9\x88\xeb\x1b\x9a\xfb\xbc\x9f\x0e\xd3\xf9\x55\x7e\x02\xc4\x83\xde\xf3\xfc\x88\xff\x71\xe9\xc7\xfb\x33\x5e\x0a\xf2\x45\x45\x2f\x46\x16\x5d\xbe\xb6\x1d\xbd\x98\x00\x7d\x9b\xad\xe8\x11\xfa\xa5\xc3\x8d\x9e\xa0\x67\x79\xbd\xad\xa1\xf7\xf2\x7a\x6b\xa0\x8f\xb8\xde\x0a\xdd\x8f\xf0\x6f\x1d\x74\xf8\xb7\x0d\x74\xf8\xb7\x1e\x3a\xfd\xb7\xd0\xe9\x3f\x40\xa7\x7f\xd9\x5f\x0c\xf4\x9f\xa0\xc3\xbf\xab\xa1\xc3\xbf\x33\xd0\xe1\xdf\x59\xe8\xf0\xef\x1c\x74\xf8\x77\xb2\xbf\xcc\xfe\x9d\x87\x4e\xff\x2d\x74\xfa\x0f\xd0\xe9\x3f\x42\xa7\xff\x04\x1d\xfe\x1b\xd9\x5f\xcf\xfe\x1b\x03\x1d\xfe\x1b\x0b\x1d\xfe\x1b\x07\x1d\xfe\x9b\x06\x3a\xfc\x37\x1e\x3a\xfd\xcb\xfe\x46\xf6\xdf\x04\xe8\xf4\x1f\xa1\xd3\x7f\x82\x0e\xff\xbe\x86\x0e\xff\xde\x40\x87\x7f\xbf\xed\xaf\xfc\xf4\xc2\xbf\x77\xd0\xe1\xdf\x37\xd0\xe1\xdf\x7b\xe8\xf4\xdf\x42\xa7\xff\x00\x9d\xfe\xa3\xd0\xd5\xfe\xe3\x13\x74\xf8\x6f\x6b\xe8\xf0\xdf\x1a\xe8\xf0\xdf\x5a\xe8\xf0\xdf\x3a\xe8\xf0\xdf\xca\xfe\xd4\xfe\xd3\x7a\xe8\xf4\xdf\x42\xa7\xff\x00\x9d\xfe\x23\x74\xfa\x4f\xd0\xe1\x3f\xc8\xfe\xd4\xfe\x13\x0c\x74\xf8\x0f\x16\x3a\xfc\x07\x07\x1d\xfe\x43\x03\x1d\xfe\x83\x87\x4e\xff\xb2\x3f\xb5\xff\x84\x00\x9d\xfe\x23\x74\xfa\x4f\xd0\xe1\x3f\xd6\xd0\xe1\x3f\x1a\xe8\xf0\x1f\x65\x7f\x6a\xff\x89\x0e\x3a\xfc\xc7\x06\x3a\xfc\x47\x0f\x9d\xfe\x5b\xe8\xf4\x1f\xa0\xd3\xff\xb6\xbf\xf2\xe9\xa7\xff\x04\x1d\xfe\xe5\x19\x32\xa8\xfd\x27\x19\xe8\xf0\x9f\x2c\x74\xf8\x4f\x0e\x3a\xfc\x27\x71\xfe\x0e\x6a\xff\x49\x1e\x3a\xfd\xb7\xd0\xe9\x3f\x40\xa7\xff\x08\x9d\xfe\x13\x74\xf8\x37\xb5\x2c\x50\x6d\x40\xa6\x36\x00\x78\x02\xad\x2d\x00\x1e\x41\x6b\x07\x20\xf3\x0e\x0d\x80\x9e\x77\xf0\x00\x54\x0a\x59\xa3\xda\x86\x4c\x1d\x00\xa8\x14\x11\x80\x4a\x91\x00\x30\x85\xa9\x01\x30\x85\x31\x00\x98\xc2\xc8\x26\xd5\x66\x64\x8c\x03\xc0\x14\xa6\x01\xc0\x14\xc6\x03\x50\x29\x5a\x00\x2a\x45\x00\xa0\x52\xc8\x26\xd5\x96\x64\x4c\x02\xc0\x14\xb6\x06\xc0\x14\xd6\x00\x60\x0a\x6b\x01\x30\x85\x75\x00\x98\x42\x0c\x26\x59\x1f\x8c\x8c\x98\x4c\xb2\x3e\x19\x19\x31\x9a\x64\x7d\x34\x32\x62\x36\xc9\xfa\x6c\x64\xc4\x70\x92\xf5\xe1\xc8\x88\xe9\x24\xeb\xd3\x91\x11\xe3\x49\xd6\xc7\x23\x23\xe6\x93\xac\xcf\x47\x46\x0c\x28\x59\x1f\x90\x8c\x98\x50\xb2\x3e\x21\x19\xd7\x00\x60\x0a\xe7\x01\xa8\x14\xb2\x49\xbd\x47\xb9\x00\x40\xa5\x88\x00\x54\x8a\x04\x80\x29\x9a\x1a\x00\x53\x34\x06\x00\x53\x34\xb2\x49\xbd\x47\x35\x0e\x00\x53\x34\x0d\x00\xa6\x68\x3c\x00\x95\xa2\x05\xa0\x52\x04\x00\x2a\x85\x6c\x52\xef\x51\x4d\x02\xc0\x14\xbe\x06\xc0\x14\xde\x00\x60\x0a\x6f\x01\x30\x85\x77\x00\x98\xc2\xcb\x26\xf5\x1e\xe5\x3d\x00\x95\xa2\x05\xa0\x52\x04\x00\x2a\x45\x04\xa0\x52\x24\x00\x4c\x21\x86\x97\x5e\x1f\x9e\x8c\x98\x5e\x7a\x7d\x7a\x32\x62\x7c\xe9\xf5\xf1\xc9\x88\xf9\xa5\xd7\xe7\x27\x23\x06\x98\x5e\x1f\xa0\x8c\x98\x60\x7a\x7d\x82\x32\x62\x84\xe9\xf5\x11\xca\x88\x19\xa6\xd7\x67\x28\x23\x86\x98\x5e\x1f\xa2\x8c\x98\x62\x7a\x7d\x8a\x32\xa1\x06\xc0\x14\xc1\x00\x60\x8a\x20\x9b\xd4\x7b\x54\x70\x00\x98\x22\x34\x00\x98\x22\x78\x00\x2a\x45\x0b\x40\xa5\x08\x00\x54\x0a\xd9\xa4\xde\xa3\x42\x02\xa0\x7e\x1f\x59\x03\x60\x8a\x68\x00\x30\x45\xb4\x00\x98\x22\x3a\x00\x4c\x11\x65\x93\x7a\x8f\x8a\x1e\x80\x4a\xd1\x02\x50\x29\x02\x00\x95\x22\x02\x50\x29\x12\x00\xa6\x48\xb2\x49\xbd\x47\x25\x03\x80\x29\x92\x05\xa0\x7e\x39\xec\x00\x30\x45\x6a\x00\x30\x45\xf2\x00\x54\x8a\x6d\x93\xe3\x17\xe7\x28\x31\xe1\x8c\x5f\x9c\xa3\xc4\x88\x33\x7e\x71\x8e\x12\x33\xce\xa8\xcf\x51\x56\xcc\x38\xa3\x3e\x47\x59\x31\xe3\x8c\xfa\x1c\x65\xc5\x8c\x33\xea\x73\x94\x15\x33\xce\xa8\xcf\x51\x56\xcc\x38\xa3\x3e\x47\x59\x31\xe3\x8c\xfa\x1c\x65\xeb\x16\x80\x4a\x11\x00\xa8\x14\xb2\x49\xfd\xcb\xee\x3a\x01\x60\x0a\x53\x03\x60\x0a\x63\x00\x30\x85\xb1\x00\xd4\x1f\x1c\x1c\x00\xa6\x30\xb2\x49\xb5\x47\x59\xe3\x01\xa8\x14\x2d\x00\x95\x22\x00\x50\x29\x22\x00\x95\x22\x01\x50\x7f\x37\x91\x4d\xaa\x3d\xca\x5a\x03\x80\x29\xac\x05\xc0\x14\xd6\x01\x60\x0a\xdb\x00\x60\x0a\xeb\x01\xa8\x14\xb2\x49\xb5\x47\x59\x1b\x00\xa8\x14\x11\x80\x4a\x91\x00\x30\x85\xab\x01\x30\x85\x33\x00\x98\x42\xfe\x11\x26\x96\x05\x60\xdb\xe4\x3a\x7d\xae\x0b\xc0\xb6\x49\xd3\x95\x05\x60\xdb\xa4\x6d\xcb\x02\xb0\x6d\xd2\xd5\x65\x01\xd8\x36\xe9\x72\x59\x00\xb6\x4d\x36\x97\x2f\x00\xdb\x26\x9b\xa1\x2c\x09\x88\x19\xc7\xc7\xb2\x00\x6c\x9b\xbc\x84\x40\x0f\x62\xc6\x69\xbb\xb2\x00\x6c\x9b\xbc\xfc\x19\x16\x3d\x88\x19\xe7\xf2\x56\xa0\x07\x31\xe3\xc4\x5c\x16\x80\x6d\x93\xa9\x29\x0b\xc0\xb6\xc9\x34\x94\x05\x40\x9c\xcc\x2f\xcf\x00\xb0\x6d\x72\x6f\xcb\x92\x80\x98\x71\xf6\x5d\x59\x00\xb6\x4d\x5e\x7a\x42\x0f\x62\xc6\xe9\xeb\xb2\x00\x88\x7f\xbb\x73\x59\x00\xb6\x4d\x5e\xde\x6d\xf4\x20\x66\x9c\xe1\xf2\x55\x80\xbf\x03\x00\x00\xff\xff\x71\x21\x21\xe6\x0d\x23\x00\x00"

func assets_terminal_css_bytes() ([]byte, error) {
	return bindata_read(
		_assets_terminal_css,
		"assets/terminal.css",
	)
}

func assets_terminal_css() (*asset, error) {
	bytes, err := assets_terminal_css_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/terminal.css", size: 8973, mode: os.FileMode(420), modTime: time.Unix(1427622150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/terminal.css": assets_terminal_css,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"assets": &_bintree_t{nil, map[string]*_bintree_t{
		"terminal.css": &_bintree_t{assets_terminal_css, map[string]*_bintree_t{}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
