- name: maven-3.5.3-jdk-8-alpine
  type: Maven
  builderImage: maven:3.5.3-jdk-8-alpine
  testCommands: |
    mvn test
  packageCommands: |
    mvn clean package -Dmaven.test.skip
  customizedDockerfile: |
    FROM jboss/base-jdk:8

    # Copy your file from source to destination.
    COPY target/<app>.jar  /test-app.jar

    # Expose ports.
    EXPOSE 8081

    # Run your app or exec your start scripts.
    CMD ["java", "-jar", "/test-app.jar"]

- name: gradle-3.4.1
  type: Gradle
  builderImage: gradle:3.4.1
  testCommands: |
    gradle clean test
  packageCommands: |
    gradle build -x test
  customizedDockerfile: |
    FROM jboss/base-jdk:8

    # Copy your file from source to destination.
    COPY build/<app>.jar  /test-app.jar

    # Expose ports.
    EXPOSE 8081

    # Run your app or exec your start scripts.
    CMD ["java", "-jar", "/test-app.jar"]

- name: golang-1.9.5-alpine3.7
  type: Go
  builderImage: golang:1.9.5-alpine3.7
  testCommands: |
    echo $GOPATH
    # Replace the {repo-path} with your own repository path, e.g. "github.com/caicloud/cyclone".
    REPO_PATH={repo-path}
    WORKDIR=$GOPATH/src/$REPO_PATH
    PARENT_PATH="$(dirname "$WORKDIR")"
    mkdir -p $PARENT_PATH
    ln -s `pwd` $WORKDIR
    cd $WORKDIR
    ls -la
    # Thert are 2 ways to run your tests, please choose one of them:
    # 1. Run your tests without JUnit test reports:
    go test -v -cover $(go list ./...)
    # 2. Run your tests with JUnit test reports:
    # apk add --no-cache git
    # go get -u github.com/jstemmer/go-junit-report
    # go test -v -cover $(go list ./...) 2>&1 | tee output.tmp
    # cat output.tmp| go-junit-report > report.xml
  packageCommands: |
    # Replace the {main-method-path} with the path of directory which contains a main() function.
    cd $WORKDIR/{main-method-path}
    go build -i -v
  customizedDockerfile: |
    FROM alpine:3.6

    # Change path to your work dir.
    WORKDIR /root

    # Copy your file from source to destination.
    COPY <app> /test-app

    # Expose ports.
    EXPOSE 7099

    # Run your app or exec your start scripts.
    ENTRYPOINT ["/test-app"]

- name: python-3.6.5-alpine3.6
  type: Python
  builderImage: python:3.6.5-alpine3.6
  testCommands: |
    # Run all the test*.py modules inside the test package.
    python -m unittest discover -s test -p 'test*.py'
  packageCommands: |
  customizedDockerfile: |
    FROM python:3.6.5-alpine3.6

    # Create working directory
    RUN mkdir -p /usr/src/app
    WORKDIR /usr/src/app

    # Add your uploaded file to workplace, if it's an archive file (zip, tar, tar.gz),
    # it will be unpacked and added to worksapce.
    ADD <uploaded-file> .

    # Make sure the requirements.txt file exists and then install dependencies using it.
    RUN touch requirements.txt
    RUN pip install --no-cache-dir -r requirements.txt

    CMD [ "python", "./<entrypoint>.py" ]

- name: node-9-alpine
  type: NodeJS
  builderImage: node:9-alpine
  testCommands: |
  packageCommands: |
    npm run build
  customizedDockerfile: |
    FROM node:9-alpine

    # Create working directory
    WORKDIR /usr/src/app

    # Add your uploaded file to workplace, if it's an archive file (zip, tar, tar.gz),
    # it will be unpacked and added to worksapce.
    ADD <uploaded-file> .

    # Install app dependencies, if you are building your code for production
    # RUN npm install --only=production
    RUN npm install

    EXPOSE 8080
    CMD [ "npm", "start" ]

- name: php-7.1-apache
  type: PHP
  builderImage: php:7.1-apache
  testCommands: |
  packageCommands: |
  customizedDockerfile: |
    FROM php:7.1-apache

    # Add your uploaded file to workplace, if it's an archive file (zip, tar, tar.gz),
    # it will be unpacked and added to worksapce.
    ADD <uploaded-file> /var/www/html/

    EXPOSE 80
