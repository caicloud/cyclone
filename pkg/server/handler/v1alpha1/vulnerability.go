package v1alpha1

import (
	"context"

	"github.com/caicloud/cyclone/pkg/server/types"

	"github.com/caicloud/cyclone/pkg/server/apis/v1alpha1"
	"github.com/caicloud/cyclone/pkg/server/model"
	"github.com/caicloud/cyclone/pkg/util/cerr"
	"github.com/caicloud/nirvana/log"
)

// CreateVulnerability create vulnerability record
func CreateVulnerability(ctx context.Context, record *v1alpha1.ImageScanRecord) (*v1alpha1.ImageScanRecord, error) {
	err := model.Vulnerability.Save(record)
	if err != nil {
		return nil, cerr.ErrorUnknownInternal.Error(err)
	}

	return record, nil
}

// ListVulnerability query vulnerability record
func ListVulnerability(ctx context.Context, workflowRun string, query *types.QueryParams) (*types.ListResponse, error) {
	vulnerabilities, err := model.Vulnerability.Retrieve(workflowRun)
	if err != nil {
		log.Errorf("retrieve vulnerabilities of workflow run: %s failed: %s\n", workflowRun, err)
		return types.NewListResponse(0, []v1alpha1.Vulnerability{}), nil
	}

	total := uint64(len(vulnerabilities))
	start, limit := query.Start, query.Limit
	if start >= total {
		return types.NewListResponse(int(total), []v1alpha1.Vulnerability{}), nil
	}

	end := start + limit
	if end > total {
		end = total
	}

	return types.NewListResponse(int(total), vulnerabilities[start:end]), nil
}
