/*
Copyright 2019 caicloud authors. All rights reserved.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/caicloud/cyclone/pkg/apis/cyclone/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WorkflowParamLister helps list WorkflowParams.
type WorkflowParamLister interface {
	// List lists all WorkflowParams in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.WorkflowParam, err error)
	// WorkflowParams returns an object that can list and get WorkflowParams.
	WorkflowParams(namespace string) WorkflowParamNamespaceLister
	WorkflowParamListerExpansion
}

// workflowParamLister implements the WorkflowParamLister interface.
type workflowParamLister struct {
	indexer cache.Indexer
}

// NewWorkflowParamLister returns a new WorkflowParamLister.
func NewWorkflowParamLister(indexer cache.Indexer) WorkflowParamLister {
	return &workflowParamLister{indexer: indexer}
}

// List lists all WorkflowParams in the indexer.
func (s *workflowParamLister) List(selector labels.Selector) (ret []*v1alpha1.WorkflowParam, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkflowParam))
	})
	return ret, err
}

// WorkflowParams returns an object that can list and get WorkflowParams.
func (s *workflowParamLister) WorkflowParams(namespace string) WorkflowParamNamespaceLister {
	return workflowParamNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WorkflowParamNamespaceLister helps list and get WorkflowParams.
type WorkflowParamNamespaceLister interface {
	// List lists all WorkflowParams in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.WorkflowParam, err error)
	// Get retrieves the WorkflowParam from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.WorkflowParam, error)
	WorkflowParamNamespaceListerExpansion
}

// workflowParamNamespaceLister implements the WorkflowParamNamespaceLister
// interface.
type workflowParamNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WorkflowParams in the indexer for a given namespace.
func (s workflowParamNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WorkflowParam, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkflowParam))
	})
	return ret, err
}

// Get retrieves the WorkflowParam from the indexer for a given namespace and name.
func (s workflowParamNamespaceLister) Get(name string) (*v1alpha1.WorkflowParam, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.GroupResource("workflowparam"), name)
	}
	return obj.(*v1alpha1.WorkflowParam), nil
}
