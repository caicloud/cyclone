/*
Copyright 2018 caicloud authors. All rights reserved.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/caicloud/cyclone/pkg/apis/cyclone/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CycloneResourceLister helps list CycloneResources.
type CycloneResourceLister interface {
	// List lists all CycloneResources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CycloneResource, err error)
	// CycloneResources returns an object that can list and get CycloneResources.
	CycloneResources(namespace string) CycloneResourceNamespaceLister
	CycloneResourceListerExpansion
}

// cycloneResourceLister implements the CycloneResourceLister interface.
type cycloneResourceLister struct {
	indexer cache.Indexer
}

// NewCycloneResourceLister returns a new CycloneResourceLister.
func NewCycloneResourceLister(indexer cache.Indexer) CycloneResourceLister {
	return &cycloneResourceLister{indexer: indexer}
}

// List lists all CycloneResources in the indexer.
func (s *cycloneResourceLister) List(selector labels.Selector) (ret []*v1alpha1.CycloneResource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CycloneResource))
	})
	return ret, err
}

// CycloneResources returns an object that can list and get CycloneResources.
func (s *cycloneResourceLister) CycloneResources(namespace string) CycloneResourceNamespaceLister {
	return cycloneResourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CycloneResourceNamespaceLister helps list and get CycloneResources.
type CycloneResourceNamespaceLister interface {
	// List lists all CycloneResources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CycloneResource, err error)
	// Get retrieves the CycloneResource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CycloneResource, error)
	CycloneResourceNamespaceListerExpansion
}

// cycloneResourceNamespaceLister implements the CycloneResourceNamespaceLister
// interface.
type cycloneResourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CycloneResources in the indexer for a given namespace.
func (s cycloneResourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CycloneResource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CycloneResource))
	})
	return ret, err
}

// Get retrieves the CycloneResource from the indexer for a given namespace and name.
func (s cycloneResourceNamespaceLister) Get(name string) (*v1alpha1.CycloneResource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cycloneresource"), name)
	}
	return obj.(*v1alpha1.CycloneResource), nil
}
