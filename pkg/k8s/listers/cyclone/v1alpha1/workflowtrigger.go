/*
Copyright 2020 caicloud authors. All rights reserved.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/caicloud/cyclone/pkg/apis/cyclone/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WorkflowTriggerLister helps list WorkflowTriggers.
type WorkflowTriggerLister interface {
	// List lists all WorkflowTriggers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.WorkflowTrigger, err error)
	// WorkflowTriggers returns an object that can list and get WorkflowTriggers.
	WorkflowTriggers(namespace string) WorkflowTriggerNamespaceLister
	WorkflowTriggerListerExpansion
}

// workflowTriggerLister implements the WorkflowTriggerLister interface.
type workflowTriggerLister struct {
	indexer cache.Indexer
}

// NewWorkflowTriggerLister returns a new WorkflowTriggerLister.
func NewWorkflowTriggerLister(indexer cache.Indexer) WorkflowTriggerLister {
	return &workflowTriggerLister{indexer: indexer}
}

// List lists all WorkflowTriggers in the indexer.
func (s *workflowTriggerLister) List(selector labels.Selector) (ret []*v1alpha1.WorkflowTrigger, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkflowTrigger))
	})
	return ret, err
}

// WorkflowTriggers returns an object that can list and get WorkflowTriggers.
func (s *workflowTriggerLister) WorkflowTriggers(namespace string) WorkflowTriggerNamespaceLister {
	return workflowTriggerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WorkflowTriggerNamespaceLister helps list and get WorkflowTriggers.
type WorkflowTriggerNamespaceLister interface {
	// List lists all WorkflowTriggers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.WorkflowTrigger, err error)
	// Get retrieves the WorkflowTrigger from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.WorkflowTrigger, error)
	WorkflowTriggerNamespaceListerExpansion
}

// workflowTriggerNamespaceLister implements the WorkflowTriggerNamespaceLister
// interface.
type workflowTriggerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WorkflowTriggers in the indexer for a given namespace.
func (s workflowTriggerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WorkflowTrigger, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkflowTrigger))
	})
	return ret, err
}

// Get retrieves the WorkflowTrigger from the indexer for a given namespace and name.
func (s workflowTriggerNamespaceLister) Get(name string) (*v1alpha1.WorkflowTrigger, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.GroupResource("workflowtrigger"), name)
	}
	return obj.(*v1alpha1.WorkflowTrigger), nil
}
