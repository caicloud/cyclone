/*
Copyright 2020 caicloud authors. All rights reserved.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/caicloud/cyclone/pkg/apis/cyclone/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ExecutionClusterLister helps list ExecutionClusters.
type ExecutionClusterLister interface {
	// List lists all ExecutionClusters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ExecutionCluster, err error)
	// Get retrieves the ExecutionCluster from the index for a given name.
	Get(name string) (*v1alpha1.ExecutionCluster, error)
	ExecutionClusterListerExpansion
}

// executionClusterLister implements the ExecutionClusterLister interface.
type executionClusterLister struct {
	indexer cache.Indexer
}

// NewExecutionClusterLister returns a new ExecutionClusterLister.
func NewExecutionClusterLister(indexer cache.Indexer) ExecutionClusterLister {
	return &executionClusterLister{indexer: indexer}
}

// List lists all ExecutionClusters in the indexer.
func (s *executionClusterLister) List(selector labels.Selector) (ret []*v1alpha1.ExecutionCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExecutionCluster))
	})
	return ret, err
}

// Get retrieves the ExecutionCluster from the index for a given name.
func (s *executionClusterLister) Get(name string) (*v1alpha1.ExecutionCluster, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.GroupResource("executioncluster"), name)
	}
	return obj.(*v1alpha1.ExecutionCluster), nil
}
