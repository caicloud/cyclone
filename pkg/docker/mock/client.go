// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_docker is a generated GoMock package.
package mock_docker

import (
	go_dockerclient "github.com/fsouza/go-dockerclient"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClientInterface is a mock of ClientInterface interface
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// PullImage mocks base method
func (m *MockClientInterface) PullImage(opts go_dockerclient.PullImageOptions, auth go_dockerclient.AuthConfiguration) error {
	ret := m.ctrl.Call(m, "PullImage", opts, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// PullImage indicates an expected call of PullImage
func (mr *MockClientInterfaceMockRecorder) PullImage(opts, auth interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullImage", reflect.TypeOf((*MockClientInterface)(nil).PullImage), opts, auth)
}

// InspectImage mocks base method
func (m *MockClientInterface) InspectImage(name string) (*go_dockerclient.Image, error) {
	ret := m.ctrl.Call(m, "InspectImage", name)
	ret0, _ := ret[0].(*go_dockerclient.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectImage indicates an expected call of InspectImage
func (mr *MockClientInterfaceMockRecorder) InspectImage(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectImage", reflect.TypeOf((*MockClientInterface)(nil).InspectImage), name)
}

// PushImage mocks base method
func (m *MockClientInterface) PushImage(opts go_dockerclient.PushImageOptions, auth go_dockerclient.AuthConfiguration) error {
	ret := m.ctrl.Call(m, "PushImage", opts, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushImage indicates an expected call of PushImage
func (mr *MockClientInterfaceMockRecorder) PushImage(opts, auth interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushImage", reflect.TypeOf((*MockClientInterface)(nil).PushImage), opts, auth)
}

// BuildImage mocks base method
func (m *MockClientInterface) BuildImage(opts go_dockerclient.BuildImageOptions) error {
	ret := m.ctrl.Call(m, "BuildImage", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuildImage indicates an expected call of BuildImage
func (mr *MockClientInterfaceMockRecorder) BuildImage(opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildImage", reflect.TypeOf((*MockClientInterface)(nil).BuildImage), opts)
}

// CreateContainer mocks base method
func (m *MockClientInterface) CreateContainer(opts go_dockerclient.CreateContainerOptions) (*go_dockerclient.Container, error) {
	ret := m.ctrl.Call(m, "CreateContainer", opts)
	ret0, _ := ret[0].(*go_dockerclient.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainer indicates an expected call of CreateContainer
func (mr *MockClientInterfaceMockRecorder) CreateContainer(opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockClientInterface)(nil).CreateContainer), opts)
}

// StartContainer mocks base method
func (m *MockClientInterface) StartContainer(id string, hostConfig *go_dockerclient.HostConfig) error {
	ret := m.ctrl.Call(m, "StartContainer", id, hostConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartContainer indicates an expected call of StartContainer
func (mr *MockClientInterfaceMockRecorder) StartContainer(id, hostConfig interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContainer", reflect.TypeOf((*MockClientInterface)(nil).StartContainer), id, hostConfig)
}

// RemoveContainer mocks base method
func (m *MockClientInterface) RemoveContainer(opts go_dockerclient.RemoveContainerOptions) error {
	ret := m.ctrl.Call(m, "RemoveContainer", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContainer indicates an expected call of RemoveContainer
func (mr *MockClientInterfaceMockRecorder) RemoveContainer(opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContainer", reflect.TypeOf((*MockClientInterface)(nil).RemoveContainer), opts)
}

// CreateExec mocks base method
func (m *MockClientInterface) CreateExec(opts go_dockerclient.CreateExecOptions) (*go_dockerclient.Exec, error) {
	ret := m.ctrl.Call(m, "CreateExec", opts)
	ret0, _ := ret[0].(*go_dockerclient.Exec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExec indicates an expected call of CreateExec
func (mr *MockClientInterfaceMockRecorder) CreateExec(opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExec", reflect.TypeOf((*MockClientInterface)(nil).CreateExec), opts)
}

// StartExec mocks base method
func (m *MockClientInterface) StartExec(id string, opts go_dockerclient.StartExecOptions) error {
	ret := m.ctrl.Call(m, "StartExec", id, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartExec indicates an expected call of StartExec
func (mr *MockClientInterfaceMockRecorder) StartExec(id, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExec", reflect.TypeOf((*MockClientInterface)(nil).StartExec), id, opts)
}

// InspectExec mocks base method
func (m *MockClientInterface) InspectExec(id string) (*go_dockerclient.ExecInspect, error) {
	ret := m.ctrl.Call(m, "InspectExec", id)
	ret0, _ := ret[0].(*go_dockerclient.ExecInspect)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectExec indicates an expected call of InspectExec
func (mr *MockClientInterfaceMockRecorder) InspectExec(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectExec", reflect.TypeOf((*MockClientInterface)(nil).InspectExec), id)
}

// DownloadFromContainer mocks base method
func (m *MockClientInterface) DownloadFromContainer(id string, opts go_dockerclient.DownloadFromContainerOptions) error {
	ret := m.ctrl.Call(m, "DownloadFromContainer", id, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFromContainer indicates an expected call of DownloadFromContainer
func (mr *MockClientInterfaceMockRecorder) DownloadFromContainer(id, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFromContainer", reflect.TypeOf((*MockClientInterface)(nil).DownloadFromContainer), id, opts)
}
