platformConfig:
  imageRegistry: registry.domain
  imageRepositoryRelease: release
  imageRepositoryLibrary: library
  controlClusterVIP: 1.2.3.4

serviceAccount: default

# Cyclone workflow engine variables
engine:
  images:
    gc: alpine:3.7
  gc:
    # Whether enable GC, if set to true, pods would be cleaned after execution finished
    enabled: true
    # The time to wait before cleanup pods when an execution finished
    delaySeconds: 0
    # How many times to retry (include the initial one)
    retry: 1
    # ResourceRequirement for the pod to execute GC
    resourceRequirement:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi
  limits:
    # Maximum number of execution records to keep for each workflow.
    maxWorkflowRuns: 50
  defaultResourceQuota:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi
  resourceRequirement:
    requests:
      cpu: 50m
      memory: 100Mi
    limits:
      cpu: 150m
      memory: 300Mi
  developMode: "false"

# Cyclone server variables
server:
  listenAddress: 0.0.0.0
  # pods in user cluster could access cyclone via `clusterPort`
  clusterPort: 6043
  listenPort: 7099
  # nodePort: 30011
  webhookUrlPrefix: http://{{ .Values.serverAddress }}/apis/v1alpha1
  recordWebURLPath: /devops/pipeline/workspaces/{{.ProjectName}}/pipelines/{{.WorkflowName}}/records/{{.WorkflowRunName}}/log?tenant={{.Tenant}}
  webhookURLPath: /hodor/?Action=HandleTenantWebhook&Version=2020-10-10&Tenant={{.Tenant}}&SourceType={{.SourceType}}&Integration={{.Integration}}
  init:
    templates: false
    defaultTenant: false
  openControlCluster: false
  pvc:
    # Default storageClass which Cyclone will use to create PVC.
    storageClass: "heketi-storageclass"
    size: 10Gi
  workerNamespaceQuota:
    requests.cpu: "1"
    requests.memory: "2Gi"
    limits.cpu: "2"
    limits.memory: "4Gi"
  resourceRequirement:
    limits:
      cpu: 150m
      memory: 300Mi
    requests:
      cpu: 50m
      memory: 100Mi
  storageWatcher:
    reportUrl: http://{{ .Values.serverAddress }}/apis/v1alpha1/storage/usages
    intervalSeconds: 180
    resourceRequirements:
      requests:
        cpu: 50m
        memory: 32Mi
      limits:
        cpu: 100m
        memory: 64Mi
  cacheCleaner:
    image: alpine:3.7
    resourceRequirements:
      requests:
        cpu: 50m
        memory: 32Mi
      limits:
        cpu: 100m
        memory: 64Mi
  clientSet:
    qps: 50.0
    burst: 100
  artifact:
    retentionSeconds: 604800
    retentionDiskProtectionThreshold: 0.1
