apiVersion: v1
kind: ConfigMap
metadata:
  name: workflow-controller-config
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ include "cyclone.name" . }}
    helm.sh/chart: {{ include "cyclone.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  workflow-controller.json: |
    {
      "images": {
        "git-resolver": "{{ include "cyclone.registry.release" . }}/cyclone-resolver-git:{{ .Chart.AppVersion }}",
        "svn-resolver": "{{ include "cyclone.registry.release" . }}/cyclone-resolver-svn:{{ .Chart.AppVersion }}",
        "image-resolver": "{{ include "cyclone.registry.release" . }}/cyclone-resolver-image:{{ .Chart.AppVersion }}",
        "http-resolver": "{{ include "cyclone.registry.release" . }}/cyclone-resolver-http:{{ .Chart.AppVersion }}",
        "coordinator": "{{ include "cyclone.registry.release" . }}/cyclone-workflow-coordinator:{{ .Chart.AppVersion }}",
        "toolbox": "{{ include "cyclone.registry.release" . }}/cyclone-toolbox:{{ .Chart.AppVersion }}",
        "gc": "{{ include "cyclone.registry.library" . }}/{{ .Values.engine.images.gc }}"
      },
      "logging": {
        "level": "info"
      },
      "gc": {
        "enabled": {{ .Values.engine.gc.enabled }},
        "delay_seconds": {{ .Values.engine.gc.delaySeconds }},
        "retry": {{ .Values.engine.gc.retry }},
        "resource_quota": {
          "limits": {
            "cpu": "{{ .Values.engine.gc.resourceRequirement.limits.cpu }}",
            "memory": "{{ .Values.engine.gc.resourceRequirement.limits.memory }}"
          },
          "requests": {
            "cpu": "{{ .Values.engine.gc.resourceRequirement.requests.cpu }}",
            "memory": "{{ .Values.engine.gc.resourceRequirement.requests.memory }}"
          }
        }
      },
      "limits": {
        "max_workflowruns": {{ .Values.engine.limits.maxWorkflowRuns }}
      },
      "default_resource_quota": {{ toJson .Values.engine.defaultResourceQuota }},
      "workers_number": {
        "execution_cluster": 1,
        "workflow_trigger": 1,
        "workflow_run": 1,
        "pod": 1
      },
      "pvc": "cyclone-server-cyclone-data",
      "cyclone_server_addr": "{{ .Values.platformConfig.controlClusterVIP }}:{{ .Values.server.clusterPort }}",
      "notification_url": "http://{{ .Values.platformConfig.controlClusterVIP }}:{{ .Values.server.clusterPort }}/apis/v1alpha1/notifications"
    }

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-workflow-controller
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ include "cyclone.name" . }}
    app.kubernetes.io/component: workflow-controller
    helm.sh/chart: {{ include "cyclone.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "cyclone.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: cyclone-workflow-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "cyclone.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: cyclone-workflow-controller
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: {{ .Values.serviceAccount }}
      containers:
      - name: controller
        command:
        - /workspace/controller
        image: "{{ include "cyclone.registry.release" . }}/cyclone-workflow-controller:{{ .Chart.AppVersion }}"
        imagePullPolicy: Always
        env:
        - name: DEVELOP_MODE
          value: {{ .Values.engine.developMode | quote }}
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        livenessProbe:
          httpGet:
            port: 8080
            path: /healthz
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
          successThreshold: 1
        resources: {{- toYaml .Values.engine.resourceRequirement | nindent 10 }}
        volumeMounts:
        - mountPath: /etc/localtime
          mountPropagation: HostToContainer
          name: timezone
      volumes:
      - name: timezone
        hostPath:
          path: /etc/localtime
          type: File
