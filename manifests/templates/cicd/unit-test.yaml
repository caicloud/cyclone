- apiVersion: cyclone.io/v1alpha1
  kind: Stage
  metadata:
    name: unit-test-template
    labels:
      cyclone.io/stage-template: "true"
      cyclone.io/builtin: "true"
      cyclone.io/scene: cicd
      cyclone.io/template-kind: unit-test
    annotations:
      cyclone.io/description: >
        Unit test for the project
  spec:
    pod:
      inputs:
        arguments:
        - name: image
        - name: cmd
        - name: test-result-path
        resources:
        - name: code
          path: /workspace
      outputs:
        resources:
        - name: test-result
          path: "{{ test-result-path }}"
      spec:
        containers:
        - image: "{{ image }}"
          command:
          - /bin/sh
          - -e
          - -c
          - "{{ cmd }}"
- apiVersion: cyclone.io/v1alpha1
  kind: Stage
  metadata:
    name: golang-unit-test-template
    labels:
      cyclone.io/stage-template: "true"
      cyclone.io/builtin: "true"
      cyclone.io/scene: cicd
      cyclone.io/template-kind: unit-test
    annotations:
      cyclone.io/description: >
        Unit test for Golang project
  spec:
    pod:
      inputs:
        arguments:
        - name: image
          value: golang:1.10-alpine3.8
        - name: cmd
          value: |
            echo $GOPATH
            # Replace the <repo-name> with your full repository name, e.g. "github.com/caicloud/cyclone".
            REPO_NAME={repo-name}
            WORKDIR=$GOPATH/src/$REPO_NAME
            PARENT_PATH="$(dirname "$WORKDIR")"
            mkdir -p $PARENT_PATH
            ln -s `pwd` $WORKDIR
            cd $WORKDIR
            ls -la
            # Thert are 2 ways to run your tests, please choose one of them:
            # 1. Run your tests without JUnit test reports:
            go test -v -cover $(go list ./...)
            # 2. Run your tests with JUnit test reports:
            # apk add --no-cache git
            # go get -u github.com/jstemmer/go-junit-report
            # go test -v -cover $(go list ./...) 2>&1 | tee output.tmp
            # cat output.tmp| go-junit-report > report.xml
        - name: test-result-path
          value: /go/src/github.com/caicloud/cyclone/report.xml
        resources:
        - name: code
          path: /go/src
      outputs:
        resources:
        - name: test-result
          path: "{{ test-result-path }}"
      spec:
        containers:
        - image: "{{ image }}"
          command:
          - /bin/sh
          - -e
          - -c
          - "{{ cmd }}"
- apiVersion: cyclone.io/v1alpha1
  kind: Stage
  metadata:
    name: maven-unit-test-template
    labels:
      cyclone.io/stage-template: "true"
      cyclone.io/builtin: "true"
      cyclone.io/scene: cicd
      cyclone.io/template-kind: unit-test
    annotations:
      cyclone.io/description: >
        Unit test for Java project with Maven
  spec:
    pod:
      inputs:
        arguments:
        - name: image
          value: maven:3.5.3-jdk-8-alpine
        - name: cmd
          value: |
            cd /workspace
            mvn test
        - name: test-result-path
          value: /workspace/target/surefire-reports
        resources:
        - name: code
          path: /workspace
      outputs:
        resources:
        - name: test-result
          path: "{{ test-result-path }}"
      spec:
        containers:
        - image: "{{ image }}"
          command:
          - /bin/sh
          - -e
          - -c
          - "{{ cmd }}"
- apiVersion: cyclone.io/v1alpha1
  kind: Stage
  metadata:
    name: gradle-unit-test-template
    labels:
      cyclone.io/stage-template: "true"
      cyclone.io/builtin: "true"
      cyclone.io/scene: cicd
      cyclone.io/template-kind: unit-test
    annotations:
      cyclone.io/description: >
        Unit test for Java project with Gradle
  spec:
    pod:
      inputs:
        arguments:
        - name: image
          value: gradle:3.4.1
        - name: cmd
          value: |
            cd /workspace
            gradle clean test
        - name: test-result-path
          value: /workspace/build/test-results
        resources:
        - name: code
          path: /workspace
      outputs:
        resources:
        - name: test-result
          path: "{{ test-result-path }}"
      spec:
        containers:
        - image: "{{ image }}"
          command:
          - /bin/sh
          - -e
          - -c
          - "{{ cmd }}"
