- apiVersion: cyclone.dev/v1alpha1
  kind: Stage
  metadata:
    name: unit-test
    labels:
      stage.cyclone.dev/template: "true"
      cyclone.dev/builtin: "true"
      cyclone.dev/scene: cicd
      stage.cyclone.dev/template-kind: unit-test
    annotations:
      cyclone.dev/description: >
        Unit test for the project
  spec:
    pod:
      inputs:
        arguments:
        - name: image
          description: Image to run this stage, for example, 'golang:1.10-alpine3.8'
        - name: cmd
          description: Commmands to run, multiple commands supported here, commands will be run as '/bin/sh -c {{{ cmd }}}'
        - name: test-result-path
          description: Path to the rest result
        resources:
        - type: Git
          path: /workspace
      outputs:
        artifacts:
        - name: test-result
          path: "{{ test-result-path }}"
      spec:
        containers:
        - image: "{{ image }}"
          command:
          - /bin/sh
          - -e
          - -c
          - "{{{ cmd }}}"
- apiVersion: cyclone.dev/v1alpha1
  kind: Stage
  metadata:
    name: golang-unit-test
    labels:
      stage.cyclone.dev/template: "true"
      cyclone.dev/builtin: "true"
      cyclone.dev/scene: cicd
      stage.cyclone.dev/template-kind: unit-test
    annotations:
      cyclone.dev/description: >
        Unit test for Golang project
  spec:
    pod:
      inputs:
        arguments:
        - name: image
          value: golang:1.10-alpine3.8
          description: Image to run this stage, for example, 'golang:1.10-alpine3.8'
        - name: cmd
          value: >-
            echo $GOPATH;
            echo 'Replace the <repo-name> with your full repository name, e.g. "github.com/caicloud/cyclone".';
            REPO_NAME={repo-name};
            WORKDIR=$GOPATH/src/$REPO_NAME;
            PARENT_PATH="$(dirname "$WORKDIR")";
            mkdir -p $PARENT_PATH;
            ln -s `pwd` $WORKDIR;
            cd $WORKDIR;
            ls -la;
            go test -v -cover $(go list ./...)
          description: Commmands to run, multiple commands supported here, commands will be run as '/bin/sh -c {{{ cmd }}}'
        - name: test-result-path
          value: /go/src/github.com/caicloud/cyclone/report.xml
          description: Path to the rest result
        resources:
        - type: Git
          path: /go/src
      outputs:
        artifacts:
        - name: test-result
          path: "{{ test-result-path }}"
      spec:
        containers:
        - image: "{{ image }}"
          command:
          - /bin/sh
          - -e
          - -c
          - "{{{ cmd }}}"
- apiVersion: cyclone.dev/v1alpha1
  kind: Stage
  metadata:
    name: golang-unit-test-report
    labels:
      stage.cyclone.dev/template: "true"
      cyclone.dev/builtin: "true"
      cyclone.dev/scene: cicd
      stage.cyclone.dev/template-kind: unit-test
    annotations:
      cyclone.dev/description: >
        Unit test for Golang project with test report
  spec:
    pod:
      inputs:
        arguments:
        - name: image
          value: golang:1.10-alpine3.8
          description: Image to run this stage, for example, 'golang:1.10-alpine3.8'
        - name: cmd
          value: >-
            echo $GOPATH;
            echo 'Replace the <repo-name> with your full repository name, e.g. "github.com/caicloud/cyclone".';
            REPO_NAME={repo-name};
            WORKDIR=$GOPATH/src/$REPO_NAME;
            PARENT_PATH="$(dirname "$WORKDIR")";
            mkdir -p $PARENT_PATH;
            ln -s `pwd` $WORKDIR;
            cd $WORKDIR;
            ls -la;
            go test -v -cover $(go list ./...);
            apk add --no-cache git;
            go get -u github.com/jstemmer/go-junit-report;
            go test -v -cover $(go list ./...) 2>&1 | tee output.tmp;
            cat output.tmp| go-junit-report > report.xml
          description: Commmands to run, multiple commands supported here, commands will be run as '/bin/sh -c {{{ cmd }}}'
        - name: test-result-path
          value: /go/src/github.com/caicloud/cyclone/report.xml
          description: Path to the rest result
        resources:
        - type: Git
          path: /go/src
      outputs:
        artifacts:
        - name: test-result
          path: "{{ test-result-path }}"
      spec:
        containers:
        - image: "{{ image }}"
          command:
          - /bin/sh
          - -e
          - -c
          - "{{{ cmd }}}"
- apiVersion: cyclone.dev/v1alpha1
  kind: Stage
  metadata:
    name: maven-unit-test
    labels:
      stage.cyclone.dev/template: "true"
      cyclone.dev/builtin: "true"
      cyclone.dev/scene: cicd
      stage.cyclone.dev/template-kind: unit-test
    annotations:
      cyclone.dev/description: >
        Unit test for Java project with Maven
  spec:
    pod:
      inputs:
        arguments:
        - name: image
          value: maven:3.5.3-jdk-8-alpine
          description: Image to run this stage, for example, 'maven:3.5.3-jdk-8-alpine'
        - name: cmd
          value: >-
            mvn test
          description: Commmands to run, multiple commands supported here, commands will be run as '/bin/sh -c {{{ cmd }}}'
        - name: test-result-path
          value: /workspace/target/surefire-reports
          description: Path to the rest result
        resources:
        - type: Git
          path: /workspace
      outputs:
        artifacts:
        - name: test-result
          path: "{{ test-result-path }}"
      spec:
        containers:
        - image: "{{ image }}"
          workingDir: /workspace
          command:
          - /bin/sh
          - -e
          - -c
          - "{{{ cmd }}}"
- apiVersion: cyclone.dev/v1alpha1
  kind: Stage
  metadata:
    name: gradle-unit-test
    labels:
      stage.cyclone.dev/template: "true"
      cyclone.dev/builtin: "true"
      cyclone.dev/scene: cicd
      stage.cyclone.dev/template-kind: unit-test
    annotations:
      cyclone.dev/description: >
        Unit test for Java project with Gradle
  spec:
    pod:
      inputs:
        arguments:
        - name: image
          value: gradle:5.5.1
          description: Image to run this stage, for example, 'gradle:5.5.1'
        - name: cmd
          value: >-
            gradle clean test
          description: Commmands to run, multiple commands supported here, commands will be run as '/bin/sh -c {{{ cmd }}}'
        - name: test-result-path
          value: /workspace/build/test-results
          description: Path to the rest result
        resources:
        - type: Git
          path: /workspace
      outputs:
        artifacts:
        - name: test-result
          path: "{{ test-result-path }}"
      spec:
        containers:
        - image: "{{ image }}"
          workingDir: /workspace
          command:
          - /bin/sh
          - -e
          - -c
          - "{{{ cmd }}}"
